basePath: /
definitions:
  models.ErrorResponse:
    description: Error response format
    properties:
      error:
        example: Detailed error message
        type: string
      message:
        example: An error occurred
        type: string
      status:
        example: error
        type: string
    type: object
  models.UserCreateResponse:
    description: User creation response
    properties:
      message:
        example: User created successfully
        type: string
      status:
        example: success
        type: string
      user:
        $ref: '#/definitions/models.UserResponse'
    type: object
  models.UserRequest:
    description: User creation request
    properties:
      age:
        example: 25
        maximum: 120
        minimum: 1
        type: integer
      email:
        example: john@example.com
        type: string
      name:
        example: John Doe
        maxLength: 100
        minLength: 2
        type: string
      password:
        example: password123
        minLength: 6
        type: string
    required:
    - age
    - email
    - name
    - password
    type: object
  models.UserResponse:
    description: User response (without password)
    properties:
      age:
        example: 25
        type: integer
      email:
        example: john@example.com
        type: string
      id:
        example: 1
        type: integer
      name:
        example: John Doe
        type: string
    type: object
  models.UsersListResponse:
    description: Users list response
    properties:
      status:
        example: success
        type: string
      users:
        items:
          $ref: '#/definitions/models.UserResponse'
        type: array
    type: object
host: localhost:3000
info:
  contact: {}
  description: This is a sample Go API with validation and database integration
  title: Go Validator API
  version: "1.0"
paths:
  /api/users:
    get:
      description: Retrieve a list of all users
      produces:
      - application/json
      responses:
        "200":
          description: List of users retrieved successfully
          schema:
            $ref: '#/definitions/models.UsersListResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with the provided information
      parameters:
      - description: User creation request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/models.UserCreateResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new user
      tags:
      - users
schemes:
- http
swagger: "2.0"
